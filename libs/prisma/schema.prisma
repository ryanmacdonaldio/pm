generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator zod {
  provider = "zod-prisma"
  output   = "./src/validators" // The directory where generated zod schemas will be saved
}

// Necessary for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  settings Json @default("{}")

  ticketsCreated      Ticket[]              @relation("created")
  ticketsAssigned     Ticket[]              @relation("assigned")
  comments            TicketComment[]
  changes             TicketHistory[]
  usersInOrganization UsersInOrganization[]
  usersInProject      UsersInProject[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String  @id @default(cuid())
  /// @zod.nonempty({ message: "Name is required" })
  name        String  @unique
  description String? @db.Text

  usersInOrganization UsersInOrganization[]
  projects            Project[]
  ticketPriorities    TicketPriority[]
  ticketStatuses      TicketStatus[]
  ticketTypes         TicketType[]
}

model UsersInOrganization {
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  admin          Boolean      @default(false)

  @@id([organizationId, userId])
}

model Project {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  /// @zod.nonempty({ message: "Name is required" })
  name           String
  description    String?      @db.Text
  startDate      DateTime?    @db.Date()
  endDate        DateTime?    @db.Date()
  archived       Boolean      @default(false)

  tickets Ticket[]
  team    UsersInProject[]

  @@unique([organizationId, name])
}

model UsersInProject {
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  manager   Boolean @default(false)

  @@id([projectId, userId])
}

model Ticket {
  id          String   @id @default(cuid())
  /// @zod.nonempty({ message: "Please choose a project" })
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  /// @zod.nonempty({ message: "Title is required" })
  title       String
  /// @zod.nonempty({ message: "Description is required" })
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  archived    Boolean  @default(false)
  creatorId   String
  creator     User     @relation("created", fields: [creatorId], references: [id])
  assignedId  String?
  assigned    User?    @relation("assigned", fields: [assignedId], references: [id])

  ticketPriorityId String?
  ticketPriority   TicketPriority? @relation(fields: [ticketPriorityId], references: [id])
  ticketStatusId   String?
  ticketStatus     TicketStatus?   @relation(fields: [ticketStatusId], references: [id])
  ticketTypeId     String?
  ticketType       TicketType?     @relation(fields: [ticketTypeId], references: [id])

  comments TicketComment[]
  history  TicketHistory[]

  @@unique([projectId, title])
}

model TicketComment {
  id        String   @id @default(cuid())
  /// @zod.nonempty({ message: "Comment is required" })
  comment   String
  createdAt DateTime @default(now())
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
}

model TicketHistory {
  id             String   @id @default(cuid())
  changeType     String
  previousValue  String
  previousColour String
  newValue       String
  newColour      String
  changedAt      DateTime @default(now())

  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])
}

model TicketPriority {
  id             String       @id @default(cuid())
  /// @zod.nonempty({ message: "Value is required" })
  value          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  colour         String       @default("black")
  rank           Int          @default(0)

  tickets Ticket[]
}

model TicketStatus {
  id             String       @id @default(cuid())
  /// @zod.nonempty({ message: "Value is required" })
  value          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  colour         String       @default("black")
  rank           Int          @default(0)

  tickets Ticket[]
}

model TicketType {
  id             String       @id @default(cuid())
  /// @zod.nonempty({ message: "Value is required" })
  value          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  colour         String       @default("black")
  rank           Int          @default(0)

  tickets Ticket[]
}
